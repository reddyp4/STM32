
CubeIDE_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800097c  0800097c  0000197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000990  08000990  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000990  08000990  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000990  08000990  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000990  08000990  00001990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000994  08000994  00001994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000998  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  080009a4  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080009a4  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c69  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000967  00000000  00000000  00003c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00004608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001d8  00000000  00000000  000048b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d2e  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ee9  00000000  00000000  000177b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000792f0  00000000  00000000  0001a69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009398f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000840  00000000  00000000  000939d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00094214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000964 	.word	0x08000964

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08000964 	.word	0x08000964

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000222:	1dfb      	adds	r3, r7, #7
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <HAL_Init+0x3c>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <HAL_Init+0x3c>)
 800022e:	2180      	movs	r1, #128	@ 0x80
 8000230:	0049      	lsls	r1, r1, #1
 8000232:	430a      	orrs	r2, r1
 8000234:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000236:	2003      	movs	r0, #3
 8000238:	f000 f816 	bl	8000268 <HAL_InitTick>
 800023c:	1e03      	subs	r3, r0, #0
 800023e:	d003      	beq.n	8000248 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000240:	1dfb      	adds	r3, r7, #7
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
 8000246:	e001      	b.n	800024c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000248:	f000 f808 	bl	800025c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781b      	ldrb	r3, [r3, #0]
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40022000 	.word	0x40022000

0800025c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000260:	46c0      	nop			@ (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000270:	230f      	movs	r3, #15
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000278:	4b1d      	ldr	r3, [pc, #116]	@ (80002f0 <HAL_InitTick+0x88>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d02b      	beq.n	80002d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000280:	4b1c      	ldr	r3, [pc, #112]	@ (80002f4 <HAL_InitTick+0x8c>)
 8000282:	681c      	ldr	r4, [r3, #0]
 8000284:	4b1a      	ldr	r3, [pc, #104]	@ (80002f0 <HAL_InitTick+0x88>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	0019      	movs	r1, r3
 800028a:	23fa      	movs	r3, #250	@ 0xfa
 800028c:	0098      	lsls	r0, r3, #2
 800028e:	f7ff ff39 	bl	8000104 <__udivsi3>
 8000292:	0003      	movs	r3, r0
 8000294:	0019      	movs	r1, r3
 8000296:	0020      	movs	r0, r4
 8000298:	f7ff ff34 	bl	8000104 <__udivsi3>
 800029c:	0003      	movs	r3, r0
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 f8e5 	bl	800046e <HAL_SYSTICK_Config>
 80002a4:	1e03      	subs	r3, r0, #0
 80002a6:	d112      	bne.n	80002ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d80a      	bhi.n	80002c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	2301      	movs	r3, #1
 80002b2:	425b      	negs	r3, r3
 80002b4:	2200      	movs	r2, #0
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 f8c4 	bl	8000444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <HAL_InitTick+0x90>)
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	e00d      	b.n	80002e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80002c4:	230f      	movs	r3, #15
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	e008      	b.n	80002e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002ce:	230f      	movs	r3, #15
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	2201      	movs	r2, #1
 80002d4:	701a      	strb	r2, [r3, #0]
 80002d6:	e003      	b.n	80002e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002d8:	230f      	movs	r3, #15
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80002e0:	230f      	movs	r3, #15
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	781b      	ldrb	r3, [r3, #0]
}
 80002e6:	0018      	movs	r0, r3
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b005      	add	sp, #20
 80002ec:	bd90      	pop	{r4, r7, pc}
 80002ee:	46c0      	nop			@ (mov r8, r8)
 80002f0:	20000004 	.word	0x20000004
 80002f4:	20000008 	.word	0x20000008
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <HAL_IncTick+0x1c>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001a      	movs	r2, r3
 8000306:	4b05      	ldr	r3, [pc, #20]	@ (800031c <HAL_IncTick+0x20>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	18d2      	adds	r2, r2, r3
 800030c:	4b03      	ldr	r3, [pc, #12]	@ (800031c <HAL_IncTick+0x20>)
 800030e:	601a      	str	r2, [r3, #0]
}
 8000310:	46c0      	nop			@ (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	20000004 	.word	0x20000004
 800031c:	20000028 	.word	0x20000028

08000320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	0002      	movs	r2, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800032e:	1dfb      	adds	r3, r7, #7
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b7f      	cmp	r3, #127	@ 0x7f
 8000334:	d828      	bhi.n	8000388 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	4a2f      	ldr	r2, [pc, #188]	@ (80003f4 <__NVIC_SetPriority+0xd4>)
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	b25b      	sxtb	r3, r3
 800033e:	089b      	lsrs	r3, r3, #2
 8000340:	33c0      	adds	r3, #192	@ 0xc0
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	589b      	ldr	r3, [r3, r2]
 8000346:	1dfa      	adds	r2, r7, #7
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	0011      	movs	r1, r2
 800034c:	2203      	movs	r2, #3
 800034e:	400a      	ands	r2, r1
 8000350:	00d2      	lsls	r2, r2, #3
 8000352:	21ff      	movs	r1, #255	@ 0xff
 8000354:	4091      	lsls	r1, r2
 8000356:	000a      	movs	r2, r1
 8000358:	43d2      	mvns	r2, r2
 800035a:	401a      	ands	r2, r3
 800035c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	019b      	lsls	r3, r3, #6
 8000362:	22ff      	movs	r2, #255	@ 0xff
 8000364:	401a      	ands	r2, r3
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	0018      	movs	r0, r3
 800036c:	2303      	movs	r3, #3
 800036e:	4003      	ands	r3, r0
 8000370:	00db      	lsls	r3, r3, #3
 8000372:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000374:	481f      	ldr	r0, [pc, #124]	@ (80003f4 <__NVIC_SetPriority+0xd4>)
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b25b      	sxtb	r3, r3
 800037c:	089b      	lsrs	r3, r3, #2
 800037e:	430a      	orrs	r2, r1
 8000380:	33c0      	adds	r3, #192	@ 0xc0
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000386:	e031      	b.n	80003ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000388:	4a1b      	ldr	r2, [pc, #108]	@ (80003f8 <__NVIC_SetPriority+0xd8>)
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	0019      	movs	r1, r3
 8000390:	230f      	movs	r3, #15
 8000392:	400b      	ands	r3, r1
 8000394:	3b08      	subs	r3, #8
 8000396:	089b      	lsrs	r3, r3, #2
 8000398:	3306      	adds	r3, #6
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	18d3      	adds	r3, r2, r3
 800039e:	3304      	adds	r3, #4
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	1dfa      	adds	r2, r7, #7
 80003a4:	7812      	ldrb	r2, [r2, #0]
 80003a6:	0011      	movs	r1, r2
 80003a8:	2203      	movs	r2, #3
 80003aa:	400a      	ands	r2, r1
 80003ac:	00d2      	lsls	r2, r2, #3
 80003ae:	21ff      	movs	r1, #255	@ 0xff
 80003b0:	4091      	lsls	r1, r2
 80003b2:	000a      	movs	r2, r1
 80003b4:	43d2      	mvns	r2, r2
 80003b6:	401a      	ands	r2, r3
 80003b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	019b      	lsls	r3, r3, #6
 80003be:	22ff      	movs	r2, #255	@ 0xff
 80003c0:	401a      	ands	r2, r3
 80003c2:	1dfb      	adds	r3, r7, #7
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	0018      	movs	r0, r3
 80003c8:	2303      	movs	r3, #3
 80003ca:	4003      	ands	r3, r0
 80003cc:	00db      	lsls	r3, r3, #3
 80003ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003d0:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <__NVIC_SetPriority+0xd8>)
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	001c      	movs	r4, r3
 80003d8:	230f      	movs	r3, #15
 80003da:	4023      	ands	r3, r4
 80003dc:	3b08      	subs	r3, #8
 80003de:	089b      	lsrs	r3, r3, #2
 80003e0:	430a      	orrs	r2, r1
 80003e2:	3306      	adds	r3, #6
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	18c3      	adds	r3, r0, r3
 80003e8:	3304      	adds	r3, #4
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	46c0      	nop			@ (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b003      	add	sp, #12
 80003f2:	bd90      	pop	{r4, r7, pc}
 80003f4:	e000e100 	.word	0xe000e100
 80003f8:	e000ed00 	.word	0xe000ed00

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	1e5a      	subs	r2, r3, #1
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	045b      	lsls	r3, r3, #17
 800040c:	429a      	cmp	r2, r3
 800040e:	d301      	bcc.n	8000414 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000410:	2301      	movs	r3, #1
 8000412:	e010      	b.n	8000436 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <SysTick_Config+0x44>)
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	3a01      	subs	r2, #1
 800041a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041c:	2301      	movs	r3, #1
 800041e:	425b      	negs	r3, r3
 8000420:	2103      	movs	r1, #3
 8000422:	0018      	movs	r0, r3
 8000424:	f7ff ff7c 	bl	8000320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000428:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <SysTick_Config+0x44>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042e:	4b04      	ldr	r3, [pc, #16]	@ (8000440 <SysTick_Config+0x44>)
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000434:	2300      	movs	r3, #0
}
 8000436:	0018      	movs	r0, r3
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	e000e010 	.word	0xe000e010

08000444 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
 800044e:	210f      	movs	r1, #15
 8000450:	187b      	adds	r3, r7, r1
 8000452:	1c02      	adds	r2, r0, #0
 8000454:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000456:	68ba      	ldr	r2, [r7, #8]
 8000458:	187b      	adds	r3, r7, r1
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b25b      	sxtb	r3, r3
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f7ff ff5d 	bl	8000320 <__NVIC_SetPriority>
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b004      	add	sp, #16
 800046c:	bd80      	pop	{r7, pc}

0800046e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff ffbf 	bl	80003fc <SysTick_Config>
 800047e:	0003      	movs	r3, r0
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000496:	e147      	b.n	8000728 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2101      	movs	r1, #1
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	4091      	lsls	r1, r2
 80004a2:	000a      	movs	r2, r1
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d100      	bne.n	80004b0 <HAL_GPIO_Init+0x28>
 80004ae:	e138      	b.n	8000722 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	2203      	movs	r2, #3
 80004b6:	4013      	ands	r3, r2
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d005      	beq.n	80004c8 <HAL_GPIO_Init+0x40>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2203      	movs	r2, #3
 80004c2:	4013      	ands	r3, r2
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d130      	bne.n	800052a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2203      	movs	r2, #3
 80004d4:	409a      	lsls	r2, r3
 80004d6:	0013      	movs	r3, r2
 80004d8:	43da      	mvns	r2, r3
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	409a      	lsls	r2, r3
 80004ea:	0013      	movs	r3, r2
 80004ec:	693a      	ldr	r2, [r7, #16]
 80004ee:	4313      	orrs	r3, r2
 80004f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	693a      	ldr	r2, [r7, #16]
 80004f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80004fe:	2201      	movs	r2, #1
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	409a      	lsls	r2, r3
 8000504:	0013      	movs	r3, r2
 8000506:	43da      	mvns	r2, r3
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	4013      	ands	r3, r2
 800050c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	2201      	movs	r2, #1
 8000516:	401a      	ands	r2, r3
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	409a      	lsls	r2, r3
 800051c:	0013      	movs	r3, r2
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	4313      	orrs	r3, r2
 8000522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	2203      	movs	r2, #3
 8000530:	4013      	ands	r3, r2
 8000532:	2b03      	cmp	r3, #3
 8000534:	d017      	beq.n	8000566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	2203      	movs	r2, #3
 8000542:	409a      	lsls	r2, r3
 8000544:	0013      	movs	r3, r2
 8000546:	43da      	mvns	r2, r3
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	4013      	ands	r3, r2
 800054c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	409a      	lsls	r2, r3
 8000558:	0013      	movs	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	4313      	orrs	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	2203      	movs	r2, #3
 800056c:	4013      	ands	r3, r2
 800056e:	2b02      	cmp	r3, #2
 8000570:	d123      	bne.n	80005ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	08da      	lsrs	r2, r3, #3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3208      	adds	r2, #8
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	58d3      	ldr	r3, [r2, r3]
 800057e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	2207      	movs	r2, #7
 8000584:	4013      	ands	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	220f      	movs	r2, #15
 800058a:	409a      	lsls	r2, r3
 800058c:	0013      	movs	r3, r2
 800058e:	43da      	mvns	r2, r3
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	691a      	ldr	r2, [r3, #16]
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2107      	movs	r1, #7
 800059e:	400b      	ands	r3, r1
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	409a      	lsls	r2, r3
 80005a4:	0013      	movs	r3, r2
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	08da      	lsrs	r2, r3, #3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3208      	adds	r2, #8
 80005b4:	0092      	lsls	r2, r2, #2
 80005b6:	6939      	ldr	r1, [r7, #16]
 80005b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	2203      	movs	r2, #3
 80005c6:	409a      	lsls	r2, r3
 80005c8:	0013      	movs	r3, r2
 80005ca:	43da      	mvns	r2, r3
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	4013      	ands	r3, r2
 80005d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	2203      	movs	r2, #3
 80005d8:	401a      	ands	r2, r3
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	409a      	lsls	r2, r3
 80005e0:	0013      	movs	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	23c0      	movs	r3, #192	@ 0xc0
 80005f4:	029b      	lsls	r3, r3, #10
 80005f6:	4013      	ands	r3, r2
 80005f8:	d100      	bne.n	80005fc <HAL_GPIO_Init+0x174>
 80005fa:	e092      	b.n	8000722 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80005fc:	4a50      	ldr	r2, [pc, #320]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	3318      	adds	r3, #24
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	589b      	ldr	r3, [r3, r2]
 8000608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2203      	movs	r2, #3
 800060e:	4013      	ands	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	220f      	movs	r2, #15
 8000614:	409a      	lsls	r2, r3
 8000616:	0013      	movs	r3, r2
 8000618:	43da      	mvns	r2, r3
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	23a0      	movs	r3, #160	@ 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	429a      	cmp	r2, r3
 8000628:	d013      	beq.n	8000652 <HAL_GPIO_Init+0x1ca>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a45      	ldr	r2, [pc, #276]	@ (8000744 <HAL_GPIO_Init+0x2bc>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d00d      	beq.n	800064e <HAL_GPIO_Init+0x1c6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a44      	ldr	r2, [pc, #272]	@ (8000748 <HAL_GPIO_Init+0x2c0>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d007      	beq.n	800064a <HAL_GPIO_Init+0x1c2>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a43      	ldr	r2, [pc, #268]	@ (800074c <HAL_GPIO_Init+0x2c4>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d101      	bne.n	8000646 <HAL_GPIO_Init+0x1be>
 8000642:	2303      	movs	r3, #3
 8000644:	e006      	b.n	8000654 <HAL_GPIO_Init+0x1cc>
 8000646:	2305      	movs	r3, #5
 8000648:	e004      	b.n	8000654 <HAL_GPIO_Init+0x1cc>
 800064a:	2302      	movs	r3, #2
 800064c:	e002      	b.n	8000654 <HAL_GPIO_Init+0x1cc>
 800064e:	2301      	movs	r3, #1
 8000650:	e000      	b.n	8000654 <HAL_GPIO_Init+0x1cc>
 8000652:	2300      	movs	r3, #0
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	2103      	movs	r1, #3
 8000658:	400a      	ands	r2, r1
 800065a:	00d2      	lsls	r2, r2, #3
 800065c:	4093      	lsls	r3, r2
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	4313      	orrs	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000664:	4936      	ldr	r1, [pc, #216]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	3318      	adds	r3, #24
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000672:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	43da      	mvns	r2, r3
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	4013      	ands	r3, r2
 8000680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	2380      	movs	r3, #128	@ 0x80
 8000688:	035b      	lsls	r3, r3, #13
 800068a:	4013      	ands	r3, r2
 800068c:	d003      	beq.n	8000696 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4313      	orrs	r3, r2
 8000694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000696:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800069c:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	43da      	mvns	r2, r3
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	4013      	ands	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	039b      	lsls	r3, r3, #14
 80006b4:	4013      	ands	r3, r2
 80006b6:	d003      	beq.n	80006c0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4313      	orrs	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80006c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 80006c8:	2384      	movs	r3, #132	@ 0x84
 80006ca:	58d3      	ldr	r3, [r2, r3]
 80006cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	43da      	mvns	r2, r3
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	4013      	ands	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	685a      	ldr	r2, [r3, #4]
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	029b      	lsls	r3, r3, #10
 80006e0:	4013      	ands	r3, r2
 80006e2:	d003      	beq.n	80006ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80006ec:	4914      	ldr	r1, [pc, #80]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 80006ee:	2284      	movs	r2, #132	@ 0x84
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80006f4:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	58d3      	ldr	r3, [r2, r3]
 80006fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	43da      	mvns	r2, r3
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4013      	ands	r3, r2
 8000704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	2380      	movs	r3, #128	@ 0x80
 800070c:	025b      	lsls	r3, r3, #9
 800070e:	4013      	ands	r3, r2
 8000710:	d003      	beq.n	800071a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4313      	orrs	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800071a:	4909      	ldr	r1, [pc, #36]	@ (8000740 <HAL_GPIO_Init+0x2b8>)
 800071c:	2280      	movs	r2, #128	@ 0x80
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	40da      	lsrs	r2, r3
 8000730:	1e13      	subs	r3, r2, #0
 8000732:	d000      	beq.n	8000736 <HAL_GPIO_Init+0x2ae>
 8000734:	e6b0      	b.n	8000498 <HAL_GPIO_Init+0x10>
  }
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b006      	add	sp, #24
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021800 	.word	0x40021800
 8000744:	50000400 	.word	0x50000400
 8000748:	50000800 	.word	0x50000800
 800074c:	50000c00 	.word	0x50000c00

08000750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	000a      	movs	r2, r1
 800075a:	1cbb      	adds	r3, r7, #2
 800075c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	1cba      	adds	r2, r7, #2
 8000764:	8812      	ldrh	r2, [r2, #0]
 8000766:	4013      	ands	r3, r2
 8000768:	d004      	beq.n	8000774 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800076a:	230f      	movs	r3, #15
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e003      	b.n	800077c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800077c:	230f      	movs	r3, #15
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	781b      	ldrb	r3, [r3, #0]
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b004      	add	sp, #16
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	0008      	movs	r0, r1
 8000794:	0011      	movs	r1, r2
 8000796:	1cbb      	adds	r3, r7, #2
 8000798:	1c02      	adds	r2, r0, #0
 800079a:	801a      	strh	r2, [r3, #0]
 800079c:	1c7b      	adds	r3, r7, #1
 800079e:	1c0a      	adds	r2, r1, #0
 80007a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007a2:	1c7b      	adds	r3, r7, #1
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007aa:	1cbb      	adds	r3, r7, #2
 80007ac:	881a      	ldrh	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007b2:	e003      	b.n	80007bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007b4:	1cbb      	adds	r3, r7, #2
 80007b6:	881a      	ldrh	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <main>:

int counter;
uint8_t buttonStatus;

int main()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    HAL_Init(); //Initialize all HAL
 80007c8:	f7ff fd28 	bl	800021c <HAL_Init>
    pa5_led_init(); //Initialize LED
 80007cc:	f000 f822 	bl	8000814 <pa5_led_init>
    pc13_btn_init();    //Initialize Button
 80007d0:	f000 f844 	bl	800085c <pc13_btn_init>
    while(1)
    {
        //Read button state and 
        buttonStatus = HAL_GPIO_ReadPin(BTN_PORT,BTN_PIN);
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	019b      	lsls	r3, r3, #6
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <main+0x44>)
 80007da:	0019      	movs	r1, r3
 80007dc:	0010      	movs	r0, r2
 80007de:	f7ff ffb7 	bl	8000750 <HAL_GPIO_ReadPin>
 80007e2:	0003      	movs	r3, r0
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <main+0x48>)
 80007e8:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_PORT,LED_PIN,buttonStatus);
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <main+0x48>)
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	23a0      	movs	r3, #160	@ 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	2120      	movs	r1, #32
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff ffc8 	bl	800078a <HAL_GPIO_WritePin>
        counter++;
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <main+0x4c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <main+0x4c>)
 8000802:	601a      	str	r2, [r3, #0]
        buttonStatus = HAL_GPIO_ReadPin(BTN_PORT,BTN_PIN);
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7e5      	b.n	80007d4 <main+0x10>
 8000808:	50000800 	.word	0x50000800
 800080c:	20000030 	.word	0x20000030
 8000810:	2000002c 	.word	0x2000002c

08000814 <pa5_led_init>:
    }
}

void pa5_led_init()
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <pa5_led_init+0x40>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <pa5_led_init+0x40>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <pa5_led_init+0x40>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
    //1. LED=PA5 as output
    GPIO_InitTypeDef GPIO_InitStruct={
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <pa5_led_init+0x44>)
 8000836:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000838:	c313      	stmia	r3!, {r0, r1, r4}
 800083a:	ca03      	ldmia	r2!, {r0, r1}
 800083c:	c303      	stmia	r3!, {r0, r1}
        GPIO_MODE_OUTPUT_PP,  //Mode
        GPIO_NOPULL,  //Pull
        GPIO_SPEED_FREQ_LOW,  //Speed
        0,  //Alternate
        };
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	23a0      	movs	r3, #160	@ 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff fe1e 	bl	8000488 <HAL_GPIO_Init>
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b007      	add	sp, #28
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	0800097c 	.word	0x0800097c

0800085c <pc13_btn_init>:

void pc13_btn_init()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <pc13_btn_init+0x54>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <pc13_btn_init+0x54>)
 8000868:	2104      	movs	r1, #4
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <pc13_btn_init+0x54>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000872:	2204      	movs	r2, #4
 8000874:	4013      	ands	r3, r2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
    //1. BTN=PC12 as input
    GPIO_InitTypeDef GPIO_InitStruct={
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	0192      	lsls	r2, r2, #6
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
        GPIO_MODE_INPUT,  //Mode
        GPIO_NOPULL,  //Pull
        GPIO_SPEED_FREQ_LOW,  //Speed
        0,  //Alternate
        };
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4a05      	ldr	r2, [pc, #20]	@ (80008b4 <pc13_btn_init+0x58>)
 800089e:	0019      	movs	r1, r3
 80008a0:	0010      	movs	r0, r2
 80008a2:	f7ff fdf1 	bl	8000488 <HAL_GPIO_Init>
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b006      	add	sp, #24
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000
 80008b4:	50000800 	.word	0x50000800

080008b8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    //Increment the clock
    HAL_IncTick();  //Update tick based on clock
 80008bc:	f7ff fd1e 	bl	80002fc <HAL_IncTick>
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008cc:	e000      	b.n	80008d0 <Reset_Handler+0x8>
 80008ce:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	@ (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f6:	f000 f811 	bl	800091c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff ff63 	bl	80007c4 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800090c:	08000998 	.word	0x08000998
  ldr r2, =_sbss
 8000910:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000914:	20000034 	.word	0x20000034

08000918 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_COMP_IRQHandler>
	...

0800091c <__libc_init_array>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	2600      	movs	r6, #0
 8000920:	4c0c      	ldr	r4, [pc, #48]	@ (8000954 <__libc_init_array+0x38>)
 8000922:	4d0d      	ldr	r5, [pc, #52]	@ (8000958 <__libc_init_array+0x3c>)
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	42a6      	cmp	r6, r4
 800092a:	d109      	bne.n	8000940 <__libc_init_array+0x24>
 800092c:	2600      	movs	r6, #0
 800092e:	f000 f819 	bl	8000964 <_init>
 8000932:	4c0a      	ldr	r4, [pc, #40]	@ (800095c <__libc_init_array+0x40>)
 8000934:	4d0a      	ldr	r5, [pc, #40]	@ (8000960 <__libc_init_array+0x44>)
 8000936:	1b64      	subs	r4, r4, r5
 8000938:	10a4      	asrs	r4, r4, #2
 800093a:	42a6      	cmp	r6, r4
 800093c:	d105      	bne.n	800094a <__libc_init_array+0x2e>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	00b3      	lsls	r3, r6, #2
 8000942:	58eb      	ldr	r3, [r5, r3]
 8000944:	4798      	blx	r3
 8000946:	3601      	adds	r6, #1
 8000948:	e7ee      	b.n	8000928 <__libc_init_array+0xc>
 800094a:	00b3      	lsls	r3, r6, #2
 800094c:	58eb      	ldr	r3, [r5, r3]
 800094e:	4798      	blx	r3
 8000950:	3601      	adds	r6, #1
 8000952:	e7f2      	b.n	800093a <__libc_init_array+0x1e>
 8000954:	08000990 	.word	0x08000990
 8000958:	08000990 	.word	0x08000990
 800095c:	08000994 	.word	0x08000994
 8000960:	08000990 	.word	0x08000990

08000964 <_init>:
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096a:	bc08      	pop	{r3}
 800096c:	469e      	mov	lr, r3
 800096e:	4770      	bx	lr

08000970 <_fini>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr
